#include<iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* next;
        
    Node() {
        cout<<"Default constructor called"<<endl;
        this->next = NULL;
    }
    
    Node(int data) {
        cout<<"Parameterized constructor called"<<endl;
        this->data = data;
        this->next= NULL;
    }
};

void printLL(Node* head) {
    Node* temp = head;
    
    while(temp!= NULL) {
      cout<<temp->data<<"->";
    temp = temp->next;   
    }
}

int findlen(Node* head) {
    Node* temp = head;
    int len = 0;
    
    while(temp != NULL) {
        len++;
        temp = temp->next;
    }
    return len;
}

void deleteNode(Node* &head, Node* &tail, int position) {
    // empty list
    if(head == NULL){
        cout<<"Cannote delete because LL is empty"<<endl;
        return;
    }
    
    int len = findlen(head);
    // deleting from head
    
    if(position == 1) {
        Node* temp  = head;
        head = head-> next;
        temp->next = NULL;
        delete temp;
    } //delete from tail
    else if(position == len) {
        Node* prev = head;
        while(prev->next != tail) {
            prev = prev->next;
        }
        prev->next = NULL;
        delete tail;
    }
    else{
        // delete from middle
        Node* prev = NULL;
        Node* curr = head;
        while(position != 1) {
            position--;
            prev = curr;
            curr = curr->next;
        }
        
        prev->next = curr->next;
        curr->next = NULL;
        delete curr;
    }
    
}

int main() {
    Node* first = new Node(10);
    Node* second = new Node(20);
    Node* third = new Node(30);
    Node* fourth = new Node(40);
    Node* fifth = new Node(50);
    
    first->next = second;
    second->next = third;
    third->next= fourth;
    fourth->next = fifth;
    
    Node* head = first;
    Node* tail = fifth;
    
    
    deleteNode(head, tail, 1);
    printLL(head);
}
